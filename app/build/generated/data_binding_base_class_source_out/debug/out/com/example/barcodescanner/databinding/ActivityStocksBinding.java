// Generated by view binder compiler. Do not edit!
package com.example.barcodescanner.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.barcodescanner.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityStocksBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final MaterialButton buttonFilterStocks;

  @NonNull
  public final FloatingActionButton fabAddStock;

  @NonNull
  public final LinearLayout headerStockAmount;

  @NonNull
  public final LinearLayout headerStockBrand;

  @NonNull
  public final LinearLayout headerStockDate;

  @NonNull
  public final LinearLayout headerStockProductType;

  @NonNull
  public final LinearLayout headerStockQuantity;

  @NonNull
  public final ImageView iconSortStockAmount;

  @NonNull
  public final ImageView iconSortStockBrand;

  @NonNull
  public final ImageView iconSortStockDate;

  @NonNull
  public final ImageView iconSortStockProductType;

  @NonNull
  public final ImageView iconSortStockQuantity;

  @NonNull
  public final LinearLayout layoutTableHeaders;

  @NonNull
  public final RecyclerView recyclerViewStockBarcodes;

  @NonNull
  public final TextView textViewEmptyState;

  @NonNull
  public final TextView textViewFrameCount;

  @NonNull
  public final TextView textViewGlassCount;

  @NonNull
  public final TextView textViewTotalCount;

  @NonNull
  public final Toolbar toolbar;

  private ActivityStocksBinding(@NonNull CoordinatorLayout rootView,
      @NonNull MaterialButton buttonFilterStocks, @NonNull FloatingActionButton fabAddStock,
      @NonNull LinearLayout headerStockAmount, @NonNull LinearLayout headerStockBrand,
      @NonNull LinearLayout headerStockDate, @NonNull LinearLayout headerStockProductType,
      @NonNull LinearLayout headerStockQuantity, @NonNull ImageView iconSortStockAmount,
      @NonNull ImageView iconSortStockBrand, @NonNull ImageView iconSortStockDate,
      @NonNull ImageView iconSortStockProductType, @NonNull ImageView iconSortStockQuantity,
      @NonNull LinearLayout layoutTableHeaders, @NonNull RecyclerView recyclerViewStockBarcodes,
      @NonNull TextView textViewEmptyState, @NonNull TextView textViewFrameCount,
      @NonNull TextView textViewGlassCount, @NonNull TextView textViewTotalCount,
      @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.buttonFilterStocks = buttonFilterStocks;
    this.fabAddStock = fabAddStock;
    this.headerStockAmount = headerStockAmount;
    this.headerStockBrand = headerStockBrand;
    this.headerStockDate = headerStockDate;
    this.headerStockProductType = headerStockProductType;
    this.headerStockQuantity = headerStockQuantity;
    this.iconSortStockAmount = iconSortStockAmount;
    this.iconSortStockBrand = iconSortStockBrand;
    this.iconSortStockDate = iconSortStockDate;
    this.iconSortStockProductType = iconSortStockProductType;
    this.iconSortStockQuantity = iconSortStockQuantity;
    this.layoutTableHeaders = layoutTableHeaders;
    this.recyclerViewStockBarcodes = recyclerViewStockBarcodes;
    this.textViewEmptyState = textViewEmptyState;
    this.textViewFrameCount = textViewFrameCount;
    this.textViewGlassCount = textViewGlassCount;
    this.textViewTotalCount = textViewTotalCount;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityStocksBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityStocksBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_stocks, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityStocksBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonFilterStocks;
      MaterialButton buttonFilterStocks = ViewBindings.findChildViewById(rootView, id);
      if (buttonFilterStocks == null) {
        break missingId;
      }

      id = R.id.fabAddStock;
      FloatingActionButton fabAddStock = ViewBindings.findChildViewById(rootView, id);
      if (fabAddStock == null) {
        break missingId;
      }

      id = R.id.headerStockAmount;
      LinearLayout headerStockAmount = ViewBindings.findChildViewById(rootView, id);
      if (headerStockAmount == null) {
        break missingId;
      }

      id = R.id.headerStockBrand;
      LinearLayout headerStockBrand = ViewBindings.findChildViewById(rootView, id);
      if (headerStockBrand == null) {
        break missingId;
      }

      id = R.id.headerStockDate;
      LinearLayout headerStockDate = ViewBindings.findChildViewById(rootView, id);
      if (headerStockDate == null) {
        break missingId;
      }

      id = R.id.headerStockProductType;
      LinearLayout headerStockProductType = ViewBindings.findChildViewById(rootView, id);
      if (headerStockProductType == null) {
        break missingId;
      }

      id = R.id.headerStockQuantity;
      LinearLayout headerStockQuantity = ViewBindings.findChildViewById(rootView, id);
      if (headerStockQuantity == null) {
        break missingId;
      }

      id = R.id.iconSortStockAmount;
      ImageView iconSortStockAmount = ViewBindings.findChildViewById(rootView, id);
      if (iconSortStockAmount == null) {
        break missingId;
      }

      id = R.id.iconSortStockBrand;
      ImageView iconSortStockBrand = ViewBindings.findChildViewById(rootView, id);
      if (iconSortStockBrand == null) {
        break missingId;
      }

      id = R.id.iconSortStockDate;
      ImageView iconSortStockDate = ViewBindings.findChildViewById(rootView, id);
      if (iconSortStockDate == null) {
        break missingId;
      }

      id = R.id.iconSortStockProductType;
      ImageView iconSortStockProductType = ViewBindings.findChildViewById(rootView, id);
      if (iconSortStockProductType == null) {
        break missingId;
      }

      id = R.id.iconSortStockQuantity;
      ImageView iconSortStockQuantity = ViewBindings.findChildViewById(rootView, id);
      if (iconSortStockQuantity == null) {
        break missingId;
      }

      id = R.id.layoutTableHeaders;
      LinearLayout layoutTableHeaders = ViewBindings.findChildViewById(rootView, id);
      if (layoutTableHeaders == null) {
        break missingId;
      }

      id = R.id.recyclerViewStockBarcodes;
      RecyclerView recyclerViewStockBarcodes = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewStockBarcodes == null) {
        break missingId;
      }

      id = R.id.textViewEmptyState;
      TextView textViewEmptyState = ViewBindings.findChildViewById(rootView, id);
      if (textViewEmptyState == null) {
        break missingId;
      }

      id = R.id.textViewFrameCount;
      TextView textViewFrameCount = ViewBindings.findChildViewById(rootView, id);
      if (textViewFrameCount == null) {
        break missingId;
      }

      id = R.id.textViewGlassCount;
      TextView textViewGlassCount = ViewBindings.findChildViewById(rootView, id);
      if (textViewGlassCount == null) {
        break missingId;
      }

      id = R.id.textViewTotalCount;
      TextView textViewTotalCount = ViewBindings.findChildViewById(rootView, id);
      if (textViewTotalCount == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityStocksBinding((CoordinatorLayout) rootView, buttonFilterStocks,
          fabAddStock, headerStockAmount, headerStockBrand, headerStockDate, headerStockProductType,
          headerStockQuantity, iconSortStockAmount, iconSortStockBrand, iconSortStockDate,
          iconSortStockProductType, iconSortStockQuantity, layoutTableHeaders,
          recyclerViewStockBarcodes, textViewEmptyState, textViewFrameCount, textViewGlassCount,
          textViewTotalCount, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
